generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "system", "warehouse"]
}

model users {
  id        Int    @id @default(autoincrement())
  username  String @unique @db.VarChar(60)
  email     String @unique @db.VarChar(255)
  password  String @db.VarChar(255)
  status_id Int    @db.Integer

  roles_by_users     roles_by_users[]
  status             users_status        @relation(fields: [status_id], references: [id], onDelete: Restrict)
  user_personal_data user_personal_data?

  @@schema("system")
}

model user_personal_data {
  id           Int      @id @default(autoincrement())
  firstname    String   @db.VarChar(60)
  lastname     String   @db.VarChar(60)
  birthdate    DateTime
  phone_number String   @db.VarChar(60)
  user_id      Int      @unique

  users users @relation(fields: [user_id], references: [id], onDelete: Restrict)

  @@schema("system")
}

model users_status {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(60)

  users users[]

  @@schema("system")
}

model modules {
  id          Int     @id @default(autoincrement())
  pathern_id  Int?    @db.Integer
  tree_level  Int     @default(0) @db.SmallInt
  place       Int     @default(0) @db.SmallInt
  name        String  @unique @db.VarChar(60)
  src         String? @db.VarChar(255)
  description String  @db.VarChar(255)
  status      Boolean @default(true)

  pathern     modules?      @relation("modulesPathern", fields: [pathern_id], references: [id], onDelete: Restrict)
  children    modules[]     @relation("modulesPathern")
  permissions permissions[]

  @@schema("system")
}

model permissions {
  id        Int     @id @default(autoincrement())
  module_id Int     @db.Integer
  role_id   Int     @db.Integer
  name      String  @unique @db.VarChar(60)
  status    Boolean @default(true)

  modules  modules? @relation(fields: [moduleId], references: [id])
  moduleId Int?

  @@schema("system")
}

model roles {
  id      Int     @id @default(autoincrement())
  name    String  @unique @db.VarChar(60)
  enabled Boolean @default(true)

  roles_by_users roles_by_users[]

  @@schema("system")
}

model roles_by_users {
  role_id Int     @db.Integer
  user_id Int     @db.Integer
  enabled Boolean @default(true) @db.Boolean

  user users @relation(fields: [user_id], references: [id], onDelete: Restrict)
  role roles @relation(fields: [role_id], references: [id], onDelete: Restrict)

  @@unique([role_id, user_id])
  @@schema("system")
}

model customers {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  dni        String
  email      String?
  phone      String
  address    String
  city       String
  state      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@schema("system")
}

model products {
  id           Int     @id @default(autoincrement())
  SKU          String  @unique @db.VarChar(60)
  name         String
  description  String?
  stock        Int
  category_id  Int
  buy_price    Float
  sell_price   Float
  image        String?
  stock_umbral Int     @default(10)

  categories products_categories @relation(fields: [category_id], references: [id], onDelete: Restrict)

  @@schema("warehouse")
}

model products_categories {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(60)

  products products[]

  @@schema("warehouse")
}
